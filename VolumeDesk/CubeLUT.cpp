////////////////////////////////////////////////////////////////////////////////
//  Title       : CubeLUT.cpp
//  Description : This file contains two look-up tables or LUTs.
//					The first one is the LUT for the marching cube
//					algorithm which defines the triangles required to build
//					all the faces.
//
//					The second LUT provides the normal vectors for each of the
//					triangles in the first LUT.
//
///////////////////////////////////////////////////////////////////////////////
//
//       Vertex ordering              vector scaling
//
//          7-------6                1
//         /|      /|                |
//        / |     / |                |     1.0
//       3--+----2  |               0.5   /
//       |  4----+--5                |  0.5
//       | /     | /                 | /
//       |/      |/                 0.0---0.5---1.0
//       0-------1
//
///////////////////////////////////////////////////////////////////////////////
//  Author      : Phil.D
//  Date        : 30 January 2002
//  Changes     : 
//               $CHANGE$
////////////////////////////////////////////////////////////////////////////////
//                                                                              
//  Copyright (c) Aicom Limited 2001                                            
//                                                                              
//  This software is the property of Aicom Limited and may be used and          
//  copied only as specifically permitted under written licence agreement.      
//                                                                              
//  Whether this software is copied in whole or in part and whether this        
//  software is copied in original or modified form, ALL COPIES OF THIS         
//  SOFTWARE MUST DISPLAY THIS NOTICE OF COPYRIGHT AND OWNERSHIP IN FULL.       
//                                                                              
////////////////////////////////////////////////////////////////////////////////


#include "stdafx.h"
#include <stdio.h>
#include <string.h>
#include "CubeLUT.h"
#include <glm\vec3.hpp> // glm::vec3
#include <glm\gtx\normal.hpp>

TFaceList faceLUT[256] = {
	{ 0, { 0.0 } },
	{ 1, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5 } },
	{ 1, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5 } },
	{ 2, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0.5 } },
	{ 1, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5 } },
	{ 2, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5 } },
	{ 2, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 1, 0.5 } },
	{ 3, { 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0.5, 0 } },
	{ 1, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5 } },
	{ 2, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0, 0.5 } },
	{ 2, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5 } },
	{ 3, { 0, 1, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 0.5, 1, 0 } },
	{ 2, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 1, 0.5 } },
	{ 3, { 1, 1, 0.5, 0, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 0.5, 0 } },
	{ 3, { 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0 } },
	{ 2, { 0, 1, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5 } },
	{ 1, { 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 2, { 0.5, 0, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 2, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 3, { 1, 0.5, 0, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 2, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 3, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 4, { 0.5, 1, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 1, 0.5 } },
	{ 2, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 3, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 4, { 0.5, 0, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 4, { 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 3, { 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 1, { 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 2, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 2, { 1, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1 } },
	{ 3, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1 } },
	{ 2, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 3, { 0.5, 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 4, { 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 2, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1 } },
	{ 3, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 1, 1, 0.5, 0, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 1, 0.5, 1 } },
	{ 4, { 0, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 1, 0.5 } },
	{ 3, { 1, 1, 0.5, 0, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 0.5, 0, 1, 1, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1 } },
	{ 2, { 0, 0.5, 1, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 3, { 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0.5, 0, 0 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1 } },
	{ 2, { 1, 0.5, 0, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 1, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0.5, 0, 0 } },
	{ 4, { 0.5, 1, 0, 0.5, 0, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 3, { 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 0 } },
	{ 3, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0, 0.5, 1, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 4, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1 } },
	{ 4, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 1, 0.5, 0, 0.5, 1, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 5, { 0.5, 0, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 5, { 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 1, 0.5 } },
	{ 2, { 0, 0.5, 1, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 0.5, 0, 1, 0.5 } },
	{ 1, { 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 2, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 2, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 2, { 0.5, 1, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5 } },
	{ 3, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1 } },
	{ 4, { 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1 } },
	{ 2, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 0, 1, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 1, 0.5, 1, 0.5, 1, 1 } },
	{ 3, { 0, 0.5, 0, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 4, { 0.5, 0, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0, 0.5 } },
	{ 4, { 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 3, { 0, 1, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 0.5, 1, 1 } },
	{ 2, { 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 0.5, 0, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 4, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 5, { 0.5, 1, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 1 } },
	{ 3, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 5, { 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 0, 0.5, 0, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 5, { 0.5, 0, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 1 } },
	{ 5, { 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 4, { 0, 0.5, 1, 0.5, 0, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 1, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 2, { 0.5, 0, 1, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 1, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 1, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0.5, 0 } },
	{ 4, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5 } },
	{ 2, { 0.5, 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1 } },
	{ 3, { 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1 } },
	{ 3, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 1, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 1, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 4, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 1, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 4, { 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 0, 0.5, 0 } },
	{ 5, { 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 0, 0.5, 0, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 5, { 0.5, 0, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 0, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 0 } },
	{ 2, { 0.5, 0, 1, 0.5, 1, 1, 0, 1, 0.5, 0.5, 0, 1, 0, 1, 0.5, 0, 0, 0.5 } },
	{ 3, { 1, 1, 0.5, 1, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 0, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 0.5, 1, 1 } },
	{ 4, { 0.5, 0, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 1 } },
	{ 5, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 1 } },
	{ 3, { 0.5, 1, 0, 0.5, 0, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 1 } },
	{ 2, { 0.5, 1, 0, 0, 0.5, 0, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 1 } },
	{ 4, { 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 0, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 0.5, 1, 1 } },
	{ 5, { 0.5, 0, 0, 0.5, 1, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 5, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 1, 0.5, 0, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 1, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 1, 0.5 } },
	{ 5, { 0, 0.5, 0, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 0, 0.5, 0, 0, 0.5, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 2, { 0.5, 0, 0, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 1, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 4, { 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 0, 0.5, 0, 0, 0.5, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 1, { 0, 0.5, 1, 0.5, 1, 1, 0, 1, 0.5 } },
	{ 1, { 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 2, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 2, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 2, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 3, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 4, { 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 2, { 0, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 3, { 0.5, 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 4, { 1, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0.5 } },
	{ 3, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 4, { 0.5, 0, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 4, { 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 3, { 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 2, { 0.5, 1, 1, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 3, { 0.5, 0, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 1 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 1, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 1 } },
	{ 4, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 5, { 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 1, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 1, 0.5 } },
	{ 3, { 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 0.5, 0 } },
	{ 2, { 0.5, 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 1 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 0.5, 0 } },
	{ 3, { 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 0 } },
	{ 4, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 1 } },
	{ 5, { 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 2, { 0.5, 1, 1, 0.5, 0, 1, 1, 0, 0.5, 0.5, 1, 1, 1, 0, 0.5, 1, 1, 0.5 } },
	{ 2, { 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 3, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 0.5, 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 5, { 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 3, { 0, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 0.5, 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 5, { 1, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1 } },
	{ 4, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 5, { 0.5, 0, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 5, { 0, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 0, 0.5, 1 } },
	{ 4, { 0.5, 1, 1, 0, 0.5, 1, 0, 0, 0.5, 0.5, 1, 1, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 3, { 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0.5, 1, 1, 1, 0, 0.5, 0.5, 1, 1, 1, 0.5, 1 } },
	{ 4, { 0.5, 0, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 0.5, 1 } },
	{ 3, { 1, 0.5, 0, 0, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 0.5, 1 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0.5, 1, 1, 1, 0, 0.5, 0.5, 1, 1, 1, 0.5, 1 } },
	{ 5, { 0.5, 1, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 5, { 0.5, 1, 0, 0.5, 0, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 1, 0.5, 0.5, 1, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 1, 0, 0.5, 1, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 4, { 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 1, 0, 0, 1, 0.5, 0.5, 1, 1, 0.5, 1, 0, 0.5, 1, 1, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 4, { 0, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 5, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 0.5, 0, 1, 0.5, 0, 0, 0.5, 0, 0.5, 1, 0, 1, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 0.5, 1 } },
	{ 2, { 1, 0.5, 0, 0.5, 1, 0, 0.5, 1, 1, 1, 0.5, 0, 0.5, 1, 1, 1, 0.5, 1 } },
	{ 5, { 0, 0.5, 0, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0.5, 1, 1, 0, 0.5, 0, 0.5, 1, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 4, { 0.5, 0, 0, 1, 0.5, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0, 0.5 } },
	{ 2, { 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 1, { 0.5, 1, 1, 1, 0.5, 1, 1, 1, 0.5 } },
	{ 2, { 1, 0.5, 1, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 3, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 1, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 4, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 3, { 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0.5, 1, 0 } },
	{ 4, { 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 0, 0 } },
	{ 4, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 5, { 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 3, { 0, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1 } },
	{ 4, { 0.5, 0, 0, 0.5, 1, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1 } },
	{ 5, { 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0.5 } },
	{ 2, { 0, 0.5, 0, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1 } },
	{ 3, { 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 0 } },
	{ 3, { 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 1 } },
	{ 2, { 1, 0.5, 1, 0, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 0.5 } },
	{ 3, { 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 0.5, 0, 1 } },
	{ 4, { 0.5, 0, 0, 0, 0.5, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 1, 0.5, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 1 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0.5, 1, 0.5, 0, 1 } },
	{ 5, { 1, 0.5, 0, 0, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 5, { 0.5, 1, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5 } },
	{ 5, { 0.5, 1, 0, 0.5, 0, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 1, 0.5, 1, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 2, { 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5, 1, 0.5, 1, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 4, { 0, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 3, { 0.5, 0, 0, 0.5, 1, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 1 } },
	{ 5, { 1, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 1, 0.5, 0, 1, 1, 0.5, 1, 0.5, 1, 1, 0.5, 0, 1, 0.5, 1, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 3, { 0, 0.5, 0, 1, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 2, { 0.5, 0, 0, 1, 0.5, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 1 } },
	{ 4, { 0, 0.5, 0, 0.5, 0, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0, 0.5 } },
	{ 1, { 1, 0.5, 1, 0.5, 0, 1, 1, 0, 0.5 } },
	{ 3, { 0, 1, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0.5, 0, 1, 0, 1, 0.5, 0.5, 0, 1, 0, 0.5, 1 } },
	{ 4, { 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0.5, 0, 1, 0, 1, 0.5, 0.5, 0, 1, 0, 0.5, 1 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 5, { 1, 0.5, 0, 0, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 5, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5 } },
	{ 3, { 0.5, 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 4, { 0.5, 1, 0, 0, 0.5, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 1, 0, 0, 0.5, 1, 0, 1, 0.5 } },
	{ 4, { 0, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 1, 0.5, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1 } },
	{ 5, { 0.5, 0, 0, 0.5, 1, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0, 0.5, 0.5, 0, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 0, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 5, { 1, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0, 0, 0.5, 0, 0.5, 1, 0, 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5 } },
	{ 2, { 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5, 0.5, 0, 1, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 3, { 0, 0.5, 0, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1 } },
	{ 4, { 0.5, 0, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 0, 0, 1, 0, 0.5, 0.5, 0, 1, 0.5, 0, 0, 0.5, 0, 1, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 2, { 0, 0.5, 0, 0.5, 0, 0, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 1 } },
	{ 1, { 0.5, 0, 1, 0, 0.5, 1, 0, 0, 0.5 } },
	{ 2, { 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 3, { 0, 1, 0.5, 1, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0.5, 0, 0, 0, 1, 0.5, 0.5, 0, 0, 0, 0.5, 0 } },
	{ 3, { 0, 0, 0.5, 0, 1, 0.5, 1, 1, 0.5, 0, 0, 0.5, 1, 1, 0.5, 1, 0.5, 0, 0, 0, 0.5, 1, 0.5, 0, 0.5, 0, 0 } },
	{ 2, { 1, 0.5, 0, 0, 0.5, 0, 0, 1, 0.5, 1, 0.5, 0, 0, 1, 0.5, 1, 1, 0.5 } },
	{ 3, { 1, 0, 0.5, 0, 0, 0.5, 0, 1, 0.5, 1, 0, 0.5, 0, 1, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0.5, 0 } },
	{ 4, { 0.5, 1, 0, 1, 0.5, 0, 1, 0, 0.5, 0.5, 1, 0, 1, 0, 0.5, 0.5, 0, 0, 0.5, 1, 0, 0.5, 0, 0, 0, 0.5, 0, 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5 } },
	{ 2, { 0.5, 1, 0, 0.5, 0, 0, 0, 0, 0.5, 0.5, 1, 0, 0, 0, 0.5, 0, 1, 0.5 } },
	{ 1, { 0.5, 1, 0, 0, 0.5, 0, 0, 1, 0.5 } },
	{ 3, { 1, 1, 0.5, 1, 0, 0.5, 0, 0, 0.5, 1, 1, 0.5, 0, 0, 0.5, 0, 0.5, 0, 1, 1, 0.5, 0, 0.5, 0, 0.5, 1, 0 } },
	{ 2, { 0.5, 0, 0, 0.5, 1, 0, 1, 1, 0.5, 0.5, 0, 0, 1, 1, 0.5, 1, 0, 0.5 } },
	{ 4, { 1, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5, 1, 0.5, 0, 0, 0, 0.5, 0, 0.5, 0, 1, 0.5, 0, 0, 0.5, 0, 0.5, 1, 0, 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5 } },
	{ 1, { 1, 0.5, 0, 0.5, 1, 0, 1, 1, 0.5 } },
	{ 2, { 0, 0.5, 0, 1, 0.5, 0, 1, 0, 0.5, 0, 0.5, 0, 1, 0, 0.5, 0, 0, 0.5 } },
	{ 1, { 0.5, 0, 0, 1, 0.5, 0, 1, 0, 0.5 } },
	{ 1, { 0, 0.5, 0, 0.5, 0, 0, 0, 0, 0.5 } },
	{ 0, { 0.0 } },
 };

TNormalsList normalsLUT[256] = {
	{ 0, { 0.0 } },
	{ 1, { 0.25, 0.25, 0.25 } },
	{ 1, { -0.25, 0.25, 0.25 } },
	{ 2, { 0, 0.5, 0.5, 0, 0.5, 0.5 } },
	{ 1, { -0.25, -0.25, 0.25 } },
	{ 2, { -0.25, -0.25, 0.25, 0.25, 0.25, 0.25 } },
	{ 2, { -0.5, 0, 0.5, -0.5, 0, 0.5 } },
	{ 3, { 0, 0, 1, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25 } },
	{ 1, { 0.25, -0.25, 0.25 } },
	{ 2, { 0.5, 0, 0.5, 0.5, 0, 0.5 } },
	{ 2, { -0.25, 0.25, 0.25, 0.25, -0.25, 0.25 } },
	{ 3, { 0, 0, 1, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25 } },
	{ 2, { 0, -0.5, 0.5, 0, -0.5, 0.5 } },
	{ 3, { 0, 0, 1, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25 } },
	{ 3, { 0, 0, 1, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25 } },
	{ 2, { 0, 0, 1, 0, 0, 1 } },
	{ 1, { 0.25, 0.25, -0.25 } },
	{ 2, { 0.5, 0.5, 0, 0.5, 0.5, 0 } },
	{ 2, { -0.25, 0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 3, { 0, 1, 0, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25 } },
	{ 2, { -0.25, -0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 3, { -0.25, -0.25, 0.25, 0.5, 0.5, 0, 0.5, 0.5, 0 } },
	{ 3, { -0.5, 0, 0.5, -0.5, 0, 0.5, 0.25, 0.25, -0.25 } },
	{ 4, { -0.5, 0.5, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.5, 0, 0.5 } },
	{ 2, { 0.25, -0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 3, { 0.5, 0, 0.5, 0.75, 0.25, 0.25, 0.5, 0.5, 0 } },
	{ 3, { -0.25, 0.25, 0.25, 0.25, -0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 4, { 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25 } },
	{ 3, { 0, -0.5, 0.5, 0, -0.5, 0.5, 0.25, 0.25, -0.25 } },
	{ 4, { 0.25, -0.25, 0.25, 0, -0.5, 1, 0.75, 0.25, 0.25, 0.5, 0.5, 0 } },
	{ 4, { 0, 0, 1, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 3, { 0, 0, 1, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25 } },
	{ 1, { -0.25, 0.25, -0.25 } },
	{ 2, { 0.25, 0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 2, { -0.5, 0.5, 0, -0.5, 0.5, 0 } },
	{ 3, { 0, 0.5, 0.5, -0.25, 0.75, 0.25, -0.5, 0.5, 0 } },
	{ 2, { -0.25, -0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 3, { -0.25, -0.25, 0.25, 0.25, 0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 3, { -1, 0, 0, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25 } },
	{ 4, { -0.25, 0.25, 0.25, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25 } },
	{ 2, { 0.25, -0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 3, { 0.5, 0, 0.5, 0.5, 0, 0.5, -0.25, 0.25, -0.25 } },
	{ 3, { -0.5, 0.5, 0, -0.5, 0.5, 0, 0.25, -0.25, 0.25 } },
	{ 4, { 0.25, 0.25, 0.25, 0.5, 0, 1, -0.25, 0.75, 0.25, -0.5, 0.5, 0 } },
	{ 3, { 0, -0.5, 0.5, 0, -0.5, 0.5, -0.25, 0.25, -0.25 } },
	{ 4, { 0, 0, 1, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 4, { -0.5, -0.5, 0, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0, -0.5, 0.5 } },
	{ 3, { 0, 0, 1, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25 } },
	{ 2, { 0, 0.5, -0.5, 0, 0.5, -0.5 } },
	{ 3, { 0, 1, 0, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 3, { -0.25, 0.25, -0.25, -0.5, 0.5, -0.5, 0, 1, 0 } },
	{ 2, { 0, 1, 0, 0, 1, 0 } },
	{ 3, { -0.25, -0.25, 0.25, 0, 0.5, -0.5, 0, 0.5, -0.5 } },
	{ 4, { -0.25, -0.25, 0.25, 0, 1, 0, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 4, { -0.5, 0, -0.5, -0.75, 0.25, -0.25, 0, 1, 0.5, -0.25, 0.25, 0.25 } },
	{ 3, { 0, 1, 0, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25 } },
	{ 3, { 0.25, -0.25, 0.25, 0, 0.5, -0.5, 0, 0.5, -0.5 } },
	{ 4, { 0.5, 0, 0.5, 0.75, 0.25, 0.25, 0, 1, -0.5, 0.25, 0.25, -0.25 } },
	{ 4, { -0.25, 0.25, -0.25, -0.5, 0.5, -0.5, 0, 1, 0, 0.25, -0.25, 0.25 } },
	{ 3, { 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0, 1, 0 } },
	{ 4, { 0, -0.5, 0.5, 0, -0.5, 0.5, 0, 0.5, -0.5, 0, 0.5, -0.5 } },
	{ 5, { 0.25, -0.25, 0.25, 0, -0.5, 1, 0.75, 0.25, 0.25, 0, 1, -0.5, 0.25, 0.25, -0.25 } },
	{ 5, { -0.25, -0.25, -0.25, -0.5, 0, 0, 0, 1, 0, -0.5, 0.5, 0.5, 0, -0.5, 0.5 } },
	{ 2, { 0, 0.5, 0.5, 0, 0.5, 0.5 } },
	{ 1, { -0.25, -0.25, -0.25 } },
	{ 2, { 0.25, 0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 2, { -0.25, 0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 3, { 0, 0.5, 0.5, 0, 0.5, 0.5, -0.25, -0.25, -0.25 } },
	{ 2, { -0.5, -0.5, 0, -0.5, -0.5, 0 } },
	{ 3, { -0.5, -0.5, 0, -0.5, -0.5, 0, 0.25, 0.25, 0.25 } },
	{ 3, { -0.5, 0, 0.5, -0.75, -0.25, 0.25, -0.5, -0.5, 0 } },
	{ 4, { -0.25, 0.25, 0.25, 0, 0.5, 1, -0.75, -0.25, 0.25, -0.5, -0.5, 0 } },
	{ 2, { 0.25, -0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 3, { 0.5, 0, 0.5, 0.5, 0, 0.5, -0.25, -0.25, -0.25 } },
	{ 3, { -0.25, 0.25, 0.25, 0.25, -0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 4, { 0, 0, 1, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 3, { 0, -1, 0, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25 } },
	{ 4, { 0.5, -0.5, 0, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.5, 0, 0.5 } },
	{ 4, { -0.25, -0.25, 0.25, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25 } },
	{ 3, { 0, 0, 1, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25 } },
	{ 2, { 0.25, 0.25, -0.25, -0.25, -0.25, -0.25 } },
	{ 3, { 0.5, 0.5, 0, 0.5, 0.5, 0, -0.25, -0.25, -0.25 } },
	{ 3, { -0.25, 0.25, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25, -0.25 } },
	{ 4, { 0, 1, 0, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 3, { -0.5, -0.5, 0, -0.5, -0.5, 0, 0.25, 0.25, -0.25 } },
	{ 4, { -0.5, -0.5, 0, -0.5, -0.5, 0, 0.5, 0.5, 0, 0.5, 0.5, 0 } },
	{ 4, { -0.5, 0, 0.5, -0.75, -0.25, 0.25, -0.5, -0.5, 0, 0.25, 0.25, -0.25 } },
	{ 5, { -0.5, 0.5, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, -0.75, -0.25, 0.25, -0.5, -0.5, 0 } },
	{ 3, { 0.25, -0.25, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25, -0.25 } },
	{ 4, { 0.5, 0, 0.5, 0.75, 0.25, 0.25, 0.5, 0.5, 0, -0.25, -0.25, -0.25 } },
	{ 4, { -0.25, 0.25, 0.25, 0.25, -0.25, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25, -0.25 } },
	{ 5, { 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25 } },
	{ 4, { 0, -1, 0, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 5, { 0.5, -0.5, 0, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, 0.75, 0.25, 0.25, 0.5, 0.5, 0 } },
	{ 5, { -0.25, -0.25, 0.25, -0.5, -0.5, 0.5, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25, 0.25, 0.25, -0.25 } },
	{ 4, { 0.25, 0.25, 0.25, 0, -0.5, 0.5, 0, 0, 0.5, -0.25, 0.25, 0.25 } },
	{ 2, { -0.5, 0, -0.5, -0.5, 0, -0.5 } },
	{ 3, { 0.25, 0.25, 0.25, -0.5, 0, -0.5, -0.5, 0, -0.5 } },
	{ 3, { -1, 0, 0, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 4, { 0, 0.5, 0.5, -0.25, 0.75, 0.25, -1, 0, -0.5, -0.25, 0.25, -0.25 } },
	{ 3, { -0.25, -0.25, -0.25, -0.5, -0.5, -0.5, -1, 0, 0 } },
	{ 4, { -0.25, -0.25, -0.25, -0.5, -0.5, -0.5, -1, 0, 0, 0.25, 0.25, 0.25 } },
	{ 2, { -1, 0, 0, -1, 0, 0 } },
	{ 3, { -0.25, 0.25, 0.25, -0.5, 0.5, 0.5, -1, 0, 0 } },
	{ 3, { 0.25, -0.25, 0.25, -0.5, 0, -0.5, -0.5, 0, -0.5 } },
	{ 4, { 0.5, 0, 0.5, 0.5, 0, 0.5, -0.5, 0, -0.5, -0.5, 0, -0.5 } },
	{ 4, { -1, 0, 0, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 } },
	{ 5, { 0.25, 0.25, 0.25, 0.5, 0, 1, -0.25, 0.75, 0.25, -1, 0, -0.5, -0.25, 0.25, -0.25 } },
	{ 4, { 0, -0.5, -0.5, -0.25, -0.75, -0.25, -1, 0, 0.5, -0.25, -0.25, 0.25 } },
	{ 5, { 0.25, -0.25, -0.25, 0, -0.5, 0, -1, 0, 0, -0.5, -0.5, 0.5, 0.5, 0, 0.5 } },
	{ 3, { -1, 0, 0, -0.5, -0.5, 0.5, -0.25, -0.25, 0.25 } },
	{ 2, { -0.5, 0, 0.5, -0.5, 0, 0.5 } },
	{ 3, { 0, 0, -1, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 4, { 0.5, 0.5, 0, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0, -0.5 } },
	{ 4, { -0.25, 0.25, -0.25, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 3, { 0, 1, 0, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 4, { -0.25, -0.25, -0.25, 0, -0.5, -1, -0.75, 0.25, -0.25, -0.5, 0.5, 0 } },
	{ 5, { -0.25, -0.25, -0.25, 0.5, 0, -0.5, 0, 0, -0.5, -0.5, 0.5, 0, -0.5, 0.5, 0 } },
	{ 3, { -0.5, 0, -0.5, -0.75, 0.25, -0.25, -0.5, 0.5, 0 } },
	{ 2, { -0.5, 0.5, 0, -0.5, 0.5, 0 } },
	{ 4, { 0.25, -0.25, 0.25, 0, 0, -1, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 5, { 0.5, 0, 0.5, 0.75, 0.25, 0.25, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, 0.5, 0, -0.5 } },
	{ 5, { -0.25, 0.25, -0.25, -0.5, 0.5, -0.5, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 } },
	{ 4, { 0.25, 0.25, 0.25, 0.5, 0.5, 0.5, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 5, { 0, -0.5, -0.5, 0, -0.5, -0.5, -0.5, 0, 0, -0.5, 0.5, 0, -0.25, -0.25, 0.25 } },
	{ 2, { 0.25, -0.25, -0.25, -0.25, 0.25, 0.25 } },
	{ 4, { -0.25, -0.25, -0.25, -0.5, 0, 0, -0.5, 0.5, 0, -0.25, -0.25, 0.25 } },
	{ 1, { -0.25, 0.25, 0.25 } },
	{ 1, { 0.25, -0.25, -0.25 } },
	{ 2, { 0.25, 0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 2, { -0.25, 0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 3, { 0, 0.5, 0.5, 0, 0.5, 0.5, 0.25, -0.25, -0.25 } },
	{ 2, { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 3, { -0.25, -0.25, 0.25, 0.25, 0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 3, { -0.5, 0, 0.5, -0.5, 0, 0.5, 0.25, -0.25, -0.25 } },
	{ 4, { 0, 0, 1, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 2, { 0.5, -0.5, 0, 0.5, -0.5, 0 } },
	{ 3, { 1, 0, 0, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25 } },
	{ 3, { -0.25, 0.25, 0.25, 0.5, -0.5, 0, 0.5, -0.5, 0 } },
	{ 4, { 0.5, 0.5, 0, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0, 0.5, 0.5 } },
	{ 3, { 0, -0.5, 0.5, 0.25, -0.75, 0.25, 0.5, -0.5, 0 } },
	{ 4, { 0.25, -0.25, 0.25, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25 } },
	{ 4, { -0.25, -0.25, 0.25, -0.5, 0, 1, 0.25, -0.75, 0.25, 0.5, -0.5, 0 } },
	{ 3, { 0, 0, 1, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25 } },
	{ 2, { 0.5, 0, -0.5, 0.5, 0, -0.5 } },
	{ 3, { 0.25, 0.25, -0.25, 0.5, 0.5, -0.5, 1, 0, 0 } },
	{ 3, { -0.25, 0.25, 0.25, 0.5, 0, -0.5, 0.5, 0, -0.5 } },
	{ 4, { 0, 0.5, -0.5, 0.25, 0.75, -0.25, 1, 0, 0.5, 0.25, 0.25, 0.25 } },
	{ 3, { -0.25, -0.25, 0.25, 0.5, 0, -0.5, 0.5, 0, -0.5 } },
	{ 4, { -0.25, -0.25, 0.25, 0.25, 0.25, -0.25, 0.5, 0.5, -0.5, 1, 0, 0 } },
	{ 4, { -0.5, 0, 0.5, -0.5, 0, 0.5, 0.5, 0, -0.5, 0.5, 0, -0.5 } },
	{ 5, { -0.25, 0.25, -0.25, 0, 0.5, 0, 1, 0, 0, 0.5, 0.5, 0.5, -0.5, 0, 0.5 } },
	{ 3, { 1, 0, 0, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 2, { 1, 0, 0, 1, 0, 0 } },
	{ 4, { -0.25, 0.25, 0.25, 1, 0, 0, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 3, { 1, 0, 0, 0.5, 0.5, 0.5, 0.25, 0.25, 0.25 } },
	{ 4, { 0, -0.5, 0.5, 0.25, -0.75, 0.25, 1, 0, -0.5, 0.25, -0.25, -0.25 } },
	{ 3, { 0.25, -0.25, 0.25, 0.5, -0.5, 0.5, 1, 0, 0 } },
	{ 5, { -0.25, -0.25, 0.25, -0.5, 0, 1, 0.25, -0.75, 0.25, 1, 0, -0.5, 0.25, -0.25, -0.25 } },
	{ 2, { 0.5, 0, 0.5, 0.5, 0, 0.5 } },
	{ 2, { 0.25, -0.25, -0.25, -0.25, 0.25, -0.25 } },
	{ 3, { 0.25, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25, 0.25, -0.25 } },
	{ 3, { -0.5, 0.5, 0, -0.5, 0.5, 0, 0.25, -0.25, -0.25 } },
	{ 4, { 0, 0.5, 0.5, -0.25, 0.75, 0.25, -0.5, 0.5, 0, 0.25, -0.25, -0.25 } },
	{ 3, { -0.25, -0.25, 0.25, 0.25, -0.25, -0.25, -0.25, 0.25, -0.25 } },
	{ 4, { -0.25, -0.25, 0.25, 0.25, 0.25, 0.25, 0.25, -0.25, -0.25, -0.25, 0.25, -0.25 } },
	{ 4, { -1, 0, 0, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 5, { -0.25, 0.25, 0.25, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, -0.25, 0.25, 0.25, 0.25, -0.25, -0.25 } },
	{ 3, { 0.5, -0.5, 0, 0.5, -0.5, 0, -0.25, 0.25, -0.25 } },
	{ 4, { 1, 0, 0, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 4, { -0.5, 0.5, 0, -0.5, 0.5, 0, 0.5, -0.5, 0, 0.5, -0.5, 0 } },
	{ 5, { 0.5, 0.5, 0, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, -0.25, 0.75, 0.25, -0.5, 0.5, 0 } },
	{ 4, { 0, -0.5, 0.5, 0.25, -0.75, 0.25, 0.5, -0.5, 0, -0.25, 0.25, -0.25 } },
	{ 5, { 0.25, -0.25, 0.25, 0.5, -0.5, 0.5, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25, -0.25, 0.25, -0.25 } },
	{ 5, { -0.5, -0.5, 0, -0.5, 0.5, 0.5, -0.5, 0.5, 0.5, 0.25, -0.75, 0.25, 0.5, -0.5, 0 } },
	{ 4, { 0.25, -0.25, 0.25, -0.5, 0, 0.5, 0, 0, 0.5, 0.25, 0.25, 0.25 } },
	{ 3, { 0, 0, -1, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 4, { 0.25, 0.25, -0.25, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 4, { -0.25, 0.25, -0.25, -0.5, 0, -1, 0.25, 0.75, -0.25, 0.5, 0.5, 0 } },
	{ 3, { 0, 0.5, -0.5, 0.25, 0.75, -0.25, 0.5, 0.5, 0 } },
	{ 4, { -0.25, -0.25, 0.25, 0, 0, -1, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 5, { -0.25, -0.25, 0.25, 0.25, 0.25, -0.25, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 5, { -0.5, 0, -0.5, -0.5, 0, -0.5, 0, 0.5, 0, 0.5, 0.5, 0, -0.25, 0.25, 0.25 } },
	{ 4, { -0.25, 0.25, -0.25, 0, 0.5, 0, 0.5, 0.5, 0, -0.25, 0.25, 0.25 } },
	{ 4, { 0.5, -0.5, 0, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0, -0.5, -0.5 } },
	{ 3, { 1, 0, 0, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 5, { -0.25, 0.25, -0.25, 0, -0.5, -0.5, 0, 0, -0.5, 0.5, 0.5, 0, 0.5, 0.5, 0 } },
	{ 2, { 0.5, 0.5, 0, 0.5, 0.5, 0 } },
	{ 5, { 0, -0.5, 0.5, 0.25, -0.75, 0.25, 0.5, 0.5, -0.5, 0.5, 0.5, -0.5, 0, -0.5, -0.5 } },
	{ 4, { 0.25, -0.25, 0.25, 0.5, -0.5, 0.5, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 2, { -0.25, -0.25, -0.25, 0.25, 0.25, 0.25 } },
	{ 1, { 0.25, 0.25, 0.25 } },
	{ 2, { 0, -0.5, -0.5, 0, -0.5, -0.5 } },
	{ 3, { 0.25, 0.25, 0.25, 0, -0.5, -0.5, 0, -0.5, -0.5 } },
	{ 3, { -0.25, 0.25, 0.25, 0, -0.5, -0.5, 0, -0.5, -0.5 } },
	{ 4, { 0, 0.5, 0.5, 0, 0.5, 0.5, 0, -0.5, -0.5, 0, -0.5, -0.5 } },
	{ 3, { 0, -1, 0, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 4, { 0, -1, 0, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25 } },
	{ 4, { -0.5, 0, 0.5, -0.75, -0.25, 0.25, 0, -1, -0.5, -0.25, -0.25, -0.25 } },
	{ 5, { -0.25, 0.25, 0.25, 0, 0.5, 1, -0.75, -0.25, 0.25, 0, -1, -0.5, -0.25, -0.25, -0.25 } },
	{ 3, { 0.25, -0.25, -0.25, 0.5, -0.5, -0.5, 0, -1, 0 } },
	{ 4, { 0.5, 0, -0.5, 0.75, -0.25, -0.25, 0, -1, 0.5, 0.25, -0.25, 0.25 } },
	{ 4, { -0.25, 0.25, 0.25, 0.25, -0.25, -0.25, 0.5, -0.5, -0.5, 0, -1, 0 } },
	{ 5, { 0.25, 0.25, -0.25, 0.5, 0, 0, 0, -1, 0, 0.5, -0.5, 0.5, 0, 0.5, 0.5 } },
	{ 2, { 0, -1, 0, 0, -1, 0 } },
	{ 3, { 0, -1, 0, 0.5, -0.5, 0.5, 0.25, -0.25, 0.25 } },
	{ 3, { -0.25, -0.25, 0.25, -0.5, -0.5, 0.5, 0, -1, 0 } },
	{ 2, { 0, -0.5, 0.5, 0, -0.5, 0.5 } },
	{ 3, { 0, 0, -1, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 4, { 0.25, 0.25, -0.25, 0, 0.5, -1, 0.75, -0.25, -0.25, 0.5, -0.5, 0 } },
	{ 4, { -0.25, 0.25, 0.25, 0, 0, -1, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 5, { 0, 0.5, -0.5, 0, 0.5, -0.5, 0.5, 0, 0, 0.5, -0.5, 0, 0.25, 0.25, 0.25 } },
	{ 4, { -0.5, -0.5, 0, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0, -0.5 } },
	{ 5, { -0.5, -0.5, 0, 0.5, -0.5, -0.5, 1, 0, 0, 0, 0, -0.5, -0.25, 0.25, -0.25 } },
	{ 5, { -0.5, 0, 0.5, -0.75, -0.25, 0.25, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, -0.5, 0, -0.5 } },
	{ 2, { -0.25, 0.25, -0.25, 0.25, -0.25, 0.25 } },
	{ 4, { 0.25, -0.25, -0.25, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 3, { 0.5, 0, -0.5, 0.75, -0.25, -0.25, 0.5, -0.5, 0 } },
	{ 5, { -0.25, 0.25, 0.25, 0.25, -0.25, -0.25, 0.5, -0.5, -0.5, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 4, { 0.25, 0.25, -0.25, 0.5, 0, 0, 0.5, -0.5, 0, 0.25, 0.25, 0.25 } },
	{ 3, { 0, -1, 0, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 2, { 0.5, -0.5, 0, 0.5, -0.5, 0 } },
	{ 4, { -0.25, -0.25, 0.25, -0.5, -0.5, 0.5, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 1, { 0.25, -0.25, 0.25 } },
	{ 3, { 0, 0, -1, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 4, { 0.25, 0.25, 0.25, 0, 0, -1, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 4, { -0.5, 0.5, 0, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0, 0.5, -0.5 } },
	{ 5, { 0, 0.5, 0.5, -0.25, 0.75, 0.25, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, 0, 0.5, -0.5 } },
	{ 4, { -0.25, -0.25, -0.25, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 5, { -0.25, -0.25, -0.25, -0.5, -0.5, -0.5, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25, 0.25, 0.25, 0.25 } },
	{ 3, { -1, 0, 0, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 4, { -0.25, 0.25, 0.25, -0.5, 0.5, 0.5, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 4, { 0.25, -0.25, -0.25, 0.5, 0, -1, -0.25, -0.75, -0.25, -0.5, -0.5, 0 } },
	{ 5, { 0.5, 0, -0.5, 0.5, 0, -0.5, 0, -0.5, 0, -0.5, -0.5, 0, 0.25, -0.25, 0.25 } },
	{ 5, { -0.5, 0.5, 0, -0.5, -0.5, -0.5, 0, -1, 0, 0, 0, -0.5, 0.25, 0.25, -0.25 } },
	{ 2, { 0.25, 0.25, -0.25, -0.25, -0.25, 0.25 } },
	{ 3, { 0, -0.5, -0.5, -0.25, -0.75, -0.25, -0.5, -0.5, 0 } },
	{ 4, { 0.25, -0.25, -0.25, 0, -0.5, 0, -0.5, -0.5, 0, 0.25, -0.25, 0.25 } },
	{ 2, { -0.5, -0.5, 0, -0.5, -0.5, 0 } },
	{ 1, { -0.25, -0.25, 0.25 } },
	{ 2, { 0, 0, -1, 0, 0, -1 } },
	{ 3, { 0, 0, -1, 0.5, 0.5, -0.5, 0.25, 0.25, -0.25 } },
	{ 3, { 0, 0, -1, -0.5, 0.5, -0.5, -0.25, 0.25, -0.25 } },
	{ 2, { 0, 0.5, -0.5, 0, 0.5, -0.5 } },
	{ 3, { 0, 0, -1, -0.5, -0.5, -0.5, -0.25, -0.25, -0.25 } },
	{ 4, { -0.25, -0.25, -0.25, 0.5, 0, -0.5, 0, 0, -0.5, -0.25, 0.25, -0.25 } },
	{ 2, { -0.5, 0, -0.5, -0.5, 0, -0.5 } },
	{ 1, { -0.25, 0.25, -0.25 } },
	{ 3, { 0, 0, -1, 0.5, -0.5, -0.5, 0.25, -0.25, -0.25 } },
	{ 2, { 0.5, 0, -0.5, 0.5, 0, -0.5 } },
	{ 4, { -0.25, 0.25, -0.25, 0, -0.5, -0.5, 0, 0, -0.5, 0.25, 0.25, -0.25 } },
	{ 1, { 0.25, 0.25, -0.25 } },
	{ 2, { 0, -0.5, -0.5, 0, -0.5, -0.5 } },
	{ 1, { 0.25, -0.25, -0.25 } },
	{ 1, { -0.25, -0.25, -0.25 } },
	{ 0, { 0.0 } },
 };

 TFaceList	*CCubeFaceLUT::GetFaces( int CubeIndex )
 {
	 return &faceLUT[CubeIndex];
 }
 
 void		CCubeFaceLUT::DumpFaces()
 {
	 static int donealready = 0;
	 FILE *stream;
 
	 if (donealready!=0)
		 return;
 
	 donealready = 1;
 
	 if( fopen_s(&stream, "faces.csv", "w") == EINVAL )
		 printf( "The file 'faces.csv' was not opened\n" );
	 else
	 {
		 unsigned int i, face;
		 int cumulativeFaces = 0;
		 TFaceList * pCurFace;
		 for (i=0;i<256;i++)
		 {
			 pCurFace = GetFaces(i);
			 fprintf(stream, "{ %d, %d, { ", i, pCurFace->number_of_faces);
			 for (face = 0; face < pCurFace->number_of_faces; ++face) {
				 if ( face > 0 ) {
					 fprintf(stream, ", ");
				 }
				 fprintf(stream, "%1.1f,%1.1f,%1.1f, ",
								 pCurFace->vertices[9 * face + 0],
								 pCurFace->vertices[9 * face + 1],
								 pCurFace->vertices[9 * face + 2]);
				 fprintf(stream, "%1.1f,%1.1f,%1.1f, ",
								 pCurFace->vertices[9 * face + 3],
								 pCurFace->vertices[9 * face + 4],
								 pCurFace->vertices[9 * face + 5]);
				 fprintf(stream, "%1.1f,%1.1f,%1.1f",
								 pCurFace->vertices[9 * face + 6],
								 pCurFace->vertices[9 * face + 7],
								 pCurFace->vertices[9 * face + 8]);
			 }
			 fprintf(stream, " } }\n");
			 cumulativeFaces += pCurFace->number_of_faces;
		 }
		 /* Close stream */
		 if( fclose( stream ) )
			 printf( "The file 'faces.csv' was not closed\n" );
		 else
			 printf( "The file 'faces.csv' was created successfully\n" );
	 }
 }
 
TNormalsList	*CCubeFaceLUT::GetNormals( int CubeIndex )
{
	return &normalsLUT[CubeIndex];
}

///////////////////////////////////////////////////////////////////////////////
//
//   Required input cube data ordering  v  Individial cube corner indexing    
//
//          9-------10------11                       6-------7
//         /|      /|      /|                       /|      /| 
//        / |     / |     / |                      / |     / |
//       3--+----4--+----5  |                     2--+----3  | 
//       |  6----+--7----+--8                     |  4----+--5 
//       | /     | /     | /                      | /     | / 
//       |/      |/      |/                       |/      |/ 
//       0-------1-------2                        0-------1
//
///////////////////////////////////////////////////////////////////////////////

int	CCubeFaceLUT::getIndexFromCubeValues( float *pValues, float threshold )
{
	int index = 0;
	if ( pValues[0] > threshold ) index |= 0x01;
	if ( pValues[1] > threshold ) index |= 0x02;
	if ( pValues[2] > threshold ) index |= 0x08;
	if ( pValues[3] > threshold ) index |= 0x04;
	if ( pValues[4] > threshold ) index |= 0x10;
	if ( pValues[5] > threshold ) index |= 0x20;
	if ( pValues[6] > threshold ) index |= 0x80;
	if ( pValues[7] > threshold ) index |= 0x40;
	return index;
}

// Retrieves the number of faces (triangles) for a given 3D volume of data.
int CCubeFaceLUT::getFaceCount( float *pDataValues, float threshold, int xDim, int yDim, int zDim )
{
	int nFaces = 0;
	int pos0, pos1, pos2, pos3, pos4, pos5, pos6, pos7;

	// First, establish how many vertices we need to make space for.
	for ( int zPos = 0; zPos < zDim - 1; zPos++ ) {
		for ( int yPos = 0; yPos < yDim - 1; yPos++ ) {
			for ( int xPos = 0; xPos < xDim - 1; xPos++ ) {
				pos0 = (xDim * yDim * zPos) + (xDim * yPos) + xPos;
				pos1 = pos0 + 1;
				pos2 = pos0 + xDim;
				pos3 = pos2 + 1;
				pos4 = pos0 + (xDim * yDim);
				pos5 = pos4 + 1;
				pos6 = pos4 + xDim;
				pos7 = pos6 + 1;

				int index = 0;
				if ( pDataValues[pos0] > threshold ) index |= 0x01;
				if ( pDataValues[pos1] > threshold ) index |= 0x02;
				if ( pDataValues[pos2] > threshold ) index |= 0x08;
				if ( pDataValues[pos3] > threshold ) index |= 0x04;
				if ( pDataValues[pos4] > threshold ) index |= 0x10;
				if ( pDataValues[pos5] > threshold ) index |= 0x20;
				if ( pDataValues[pos6] > threshold ) index |= 0x80;
				if ( pDataValues[pos7] > threshold ) index |= 0x40;

				nFaces += faceLUT[index].number_of_faces;
			}
		}
	}

	// REMEMBER: each face consists of one triangle with three vertices, each of which is 4 floats.
	return nFaces;
}

int CCubeFaceLUT::renderVolume( float *pDataValues, float threshold, int xDim, int yDim, int zDim, float *pVertexValues, float * pNormalValues )
{
	int printit = 0;
	int nFaces = 0;
	int pos0, pos1, pos2, pos3, pos4, pos5, pos6, pos7;

	// Now we know how much memory we need we can allocate it.
//	pVertexValues = new float [3 * nFaces];  // Commented out until I understand cause of segmentation fault.
	float *pIndexIntoVertices = pVertexValues;
	float *pIndexIntoNormals = pNormalValues;
	
	// And repeat the above to render into triangles and copy to the volume.
	for ( int zPos = 0; zPos < zDim - 1; zPos++ ) {
		for ( int yPos = 0; yPos < yDim - 1; yPos++ ) {
			for ( int xPos = 0; xPos < xDim - 1; xPos++ ) {
				pos0 = (xDim * yDim * zPos) + (xDim * yPos) + xPos;
				pos1 = pos0 + 1;
				pos2 = pos0 + xDim;
				pos3 = pos2 + 1;
				pos4 = pos0 + (xDim * yDim);
				pos5 = pos4 + 1;
				pos6 = pos4 + xDim;
				pos7 = pos6 + 1;

				int index = 0;
				if ( pDataValues[pos0] > threshold ) index |= 0x01;
				if ( pDataValues[pos1] > threshold ) index |= 0x02;
				if ( pDataValues[pos2] > threshold ) index |= 0x08;
				if ( pDataValues[pos3] > threshold ) index |= 0x04;
				if ( pDataValues[pos4] > threshold ) index |= 0x10;
				if ( pDataValues[pos5] > threshold ) index |= 0x20;
				if ( pDataValues[pos6] > threshold ) index |= 0x80;
				if ( pDataValues[pos7] > threshold ) index |= 0x40;

				if ( printit && (faceLUT[index].number_of_faces > 0)) {
					printf("index %d has %d faces --------------------------------------------------------\r\n", index, faceLUT[index].number_of_faces );
				}

				nFaces += faceLUT[index].number_of_faces;
				
				for ( int face = 0; face < faceLUT[index].number_of_faces; face++ ) {
					// Each face has three vertices, each with three coordinates plus "1.0"
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 0] + (float)xPos;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 1] + (float)yPos;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 2] + (float)zPos;
					*pIndexIntoVertices++ = 1.0f;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 3] + (float)xPos;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 4] + (float)yPos;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 5] + (float)zPos;
					*pIndexIntoVertices++ = 1.0f;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 6] + (float)xPos;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 7] + (float)yPos;
					*pIndexIntoVertices++ = faceLUT[index].vertices[9 * face + 8] + (float)zPos;
					*pIndexIntoVertices++ = 1.0f;
					if ( printit ) {
						printf( "    %1.1f, %1.1f, %1.1f, %1.1f | %1.1f, %1.1f, %1.1f, %1.1f | %1.1f, %1.1f, %1.1f, %1.1f \r\n",
							*(pIndexIntoVertices-12), *(pIndexIntoVertices-11), *(pIndexIntoVertices-10), *(pIndexIntoVertices-9),
							*(pIndexIntoVertices-8), *(pIndexIntoVertices-7), *(pIndexIntoVertices-6), *(pIndexIntoVertices-5),
							*(pIndexIntoVertices-4), *(pIndexIntoVertices-3), *(pIndexIntoVertices-2), *(pIndexIntoVertices-1) );
					}
					
					
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 0];
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 1];
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 2];
					*pIndexIntoNormals++ = 1.0f;
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 0];
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 1];
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 2];
					*pIndexIntoNormals++ = 1.0f;
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 0];
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 1];
					*pIndexIntoNormals++ = normalsLUT[index].vertices[3 * face + 2];
					*pIndexIntoNormals++ = 1.0f;
					/*
					// Make a normal for each vertex (corner) of the triangle.
					glm::vec3 p1( *(pIndexIntoVertices-12), *(pIndexIntoVertices-11), *(pIndexIntoVertices-10) );
					glm::vec3 p2( *(pIndexIntoVertices-8), *(pIndexIntoVertices-7), *(pIndexIntoVertices-6) );
					glm::vec3 p3( *(pIndexIntoVertices-4), *(pIndexIntoVertices-3), *(pIndexIntoVertices-2) );
					glm::vec3 calcNormal = glm::triangleNormal( p1, p2, p3 );
					for ( int vtx = 0; vtx < 3; vtx++ ) {
						*pIndexIntoNormals++ = calcNormal.x;
						*pIndexIntoNormals++ = calcNormal.y;
						*pIndexIntoNormals++ = calcNormal.z;
					} */
				}
			}
		}
	}	

	// Return the number of faces we generated.
	return nFaces;
}

int CCubeFaceLUT::CheckFaceNormal(float *pTriangle, float *pNormals) {
	glm::vec3 p1( pTriangle[0], pTriangle[1], pTriangle[2] );
	glm::vec3 p2( pTriangle[3], pTriangle[4], pTriangle[5] );
	glm::vec3 p3( pTriangle[6], pTriangle[7], pTriangle[8] );
	glm::vec3 calcNormal = glm::triangleNormal( p1, p2, p3 );

	glm::vec3 normIn( pNormals[0], pNormals[1], pNormals[2]);
	normIn = glm::normalize(normIn);

	float dotResult = glm::dot(calcNormal, normIn);
	glm::vec3 crossResult = glm::cross(calcNormal, normIn);
	float length = glm::length(crossResult);

	printf("--------------\r\n");
	printf( "calc'd = %1.2f, %1.2f, %1.2f\r\n", calcNormal.x, calcNormal.y, calcNormal.z );
	printf( "preset = %1.2f, %1.2f, %1.2f\r\n", normIn.x, normIn.y, normIn.z );
	printf("dot result %1.2f, cross = vec3(%1.2f, %1.2f, %1.2f), length = %1.2f\r\n",
			dotResult, crossResult.x, crossResult.y, crossResult.z, length);
	
	if (length == 0.0f) {
		return 0;  // OK.
	} else {
		printf("ERROR:\r\n");
		printf("--------------\r\n");
		printf( "calc'd = %1.2f, %1.2f, %1.2f\r\n", calcNormal.x, calcNormal.y, calcNormal.z );
		printf( "preset = %1.2f, %1.2f, %1.2f\r\n", normIn.x, normIn.y, normIn.z );
	
		printf("dot result %1.2f, cross = vec3(%1.2f, %1.2f, %1.2f), length = %1.2f\r\n",
				dotResult, crossResult.x, crossResult.y, crossResult.z, length);
		return 1;  // Failed test.
	}
}

void CCubeFaceLUT::CheckAllNormals() {
	printf("Checking normalsLUT values against the faceLUT...\r\n");
	int nErrors = 0;
	for ( int index = 0; index < 12; index++ ) {
		for ( int face = 0; face < faceLUT[index].number_of_faces; face++ ) {
			if ( CheckFaceNormal(&(faceLUT[index].vertices[face * 9]), &(normalsLUT[index].vertices[face * 3])) == 1 ) {
				// NOT OK
				nErrors += 1;
				printf("Error at index of %03d\n", index);
			} else {
				// OK.
			}
		}
	}
	printf("normalsLUT checked. %d errors.\r\n", nErrors);
}